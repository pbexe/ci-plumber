{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CI Plumber Installation Please see the installation instructions . Basic usage ci-plumber - Show all commands ci-plumber <command> - Show specific command help ci-plumber <command> <subcommand> --help - Show specific subcommand help ci-plumber gitlab init - Initialize GitLab CI ci-plumber openshift deploy - Deploy to OpenShift from Gitlab","title":"Home"},{"location":"#welcome-to-ci-plumber","text":"","title":"Welcome to CI Plumber"},{"location":"#installation","text":"Please see the installation instructions .","title":"Installation"},{"location":"#basic-usage","text":"ci-plumber - Show all commands ci-plumber <command> - Show specific command help ci-plumber <command> <subcommand> --help - Show specific subcommand help ci-plumber gitlab init - Initialize GitLab CI ci-plumber openshift deploy - Deploy to OpenShift from Gitlab","title":"Basic usage"},{"location":"azure/","text":"Azure Subcommands Usage: ci-plumber azure [OPTIONS] COMMAND [ARGS]... Tools to manage deploying to Azure Options: --help Show this message and exit. Commands: create-db Create a database in Azure create-registry Create a new Azure Container Registry deploy Creates an azure web app list-subscriptions List Azure subscriptions. login Log in to Azure using Azure CLI. set-default-subscription Set default subscription. Creating a Database Usage: ci-plumber azure create-db [OPTIONS] Create a database in Azure Options: --name TEXT Enter a unique name that identifies your Azure Database for MariaDB server. The server name can contain only lowercase letters, numbers, and the hyphen (-) character. It must contain between 3 and 63 characters. [default: my- database-238878051] --resource-group TEXT The name of the resource group to use. [default: myResourceGroup] --sku [B_Gen5_1|GP_Gen5_32|MO_Gen5_2] Database SKU [default: B_Gen5_1] --backup-retention INTEGER Database backup retention in days. [default: 7] --geo-redundant [Disabled|Enabled] Whether geo-redundant backups should be enabled for this server. [default: Disabled] --location [eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|northcentralus|westus|southafricanorth|centralindia|eastasia|japaneast|jioindiawest|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|india|japan|uk|unitedstates|eastasiastage|southeastasiastage|centraluseuap|eastus2euap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|swedensouth|switzerlandwest|ukwest|uaecentral|brazilsoutheast|qatarcentral] The Azure location for the server. [default: uksouth] --ssl [Disabled|Enabled] Whether SSL should be enabled for this server. [default: Enabled] --storage INTEGER The storage capacity of the server (the unit is megabytes). Valid storage sizes are 5,120 MB (minimum) with increases in 1,024-MB increments. [default: 51200] --version TEXT The version of MariaDB to use. [default: 10.2] --admin-username TEXT The user name for the administrator login. The admin-user parameter can't be azure_superuser, admin, administrator, root, guest, or public. [default: myadmin] --admin-password TEXT The password of the administrator user. Your password must contain between 8 and 128 characters. It must contain characters from three of the following categories: English uppercase letters, English lowercase letters, numbers, and non-alphanumeric characters. [required] --help Creating a Registry Usage: ci-plumber azure create-registry [OPTIONS] Create a new Azure Container Registry Options: --registry-name TEXT The name of the registry [default: registry-195968669] --resource-group-name TEXT The name of the resource group to use. [default: myResourceGroup] --location [eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|northcentralus|westus|southafricanorth|centralindia|eastasia|japaneast|jioindiawest|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|india|japan|uk|unitedstates|eastasiastage|southeastasiastage|centraluseuap|eastus2euap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|swedensouth|switzerlandwest|ukwest|uaecentral|brazilsoutheast|qatarcentral] The name of the location to create the registry in. [default: uksouth] --sku [Basic|Standard|Premium] The SKU of the registry. [default: Basic] -v, --verbose Verbose output. [default: False] --help Show this message and exit. Deploying a Web App Usage: ci-plumber azure deploy [OPTIONS] Creates an azure web app Options: --service-plan TEXT Service plan name [default: myServicePlan] --app-name TEXT Application name [default: myApp-105028613] --resource-group TEXT The name of the resource group to use. [default: myResourceGroup] --os-type TEXT OS type [default: linux] --image TEXT The name of the image to use. [required] --login-server TEXT The name of the login server to use. [required] --registry-name TEXT The name of the registry to use. [required] -v, --verbose Verbose output. [default: False] --help Show this message and exit. Listing Subscriptions Usage: ci-plumber azure list-subscriptions [OPTIONS] List Azure subscriptions. Options: --help Show this message and exit. ``` # ## Changing Active Subscription ```console Usage: ci-plumber azure set-default-subscription [OPTIONS] Set default subscription. Options: --subscription-id TEXT The subscription ID to set as default. [required] --help Show this message and exit. Logging in to Azure Usage: ci-plumber azure login [OPTIONS] Log in to Azure using Azure CLI. Options: --help Show this message and exit.","title":"Azure"},{"location":"azure/#azure","text":"","title":"Azure"},{"location":"azure/#subcommands","text":"Usage: ci-plumber azure [OPTIONS] COMMAND [ARGS]... Tools to manage deploying to Azure Options: --help Show this message and exit. Commands: create-db Create a database in Azure create-registry Create a new Azure Container Registry deploy Creates an azure web app list-subscriptions List Azure subscriptions. login Log in to Azure using Azure CLI. set-default-subscription Set default subscription.","title":"Subcommands"},{"location":"azure/#creating-a-database","text":"Usage: ci-plumber azure create-db [OPTIONS] Create a database in Azure Options: --name TEXT Enter a unique name that identifies your Azure Database for MariaDB server. The server name can contain only lowercase letters, numbers, and the hyphen (-) character. It must contain between 3 and 63 characters. [default: my- database-238878051] --resource-group TEXT The name of the resource group to use. [default: myResourceGroup] --sku [B_Gen5_1|GP_Gen5_32|MO_Gen5_2] Database SKU [default: B_Gen5_1] --backup-retention INTEGER Database backup retention in days. [default: 7] --geo-redundant [Disabled|Enabled] Whether geo-redundant backups should be enabled for this server. [default: Disabled] --location [eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|northcentralus|westus|southafricanorth|centralindia|eastasia|japaneast|jioindiawest|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|india|japan|uk|unitedstates|eastasiastage|southeastasiastage|centraluseuap|eastus2euap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|swedensouth|switzerlandwest|ukwest|uaecentral|brazilsoutheast|qatarcentral] The Azure location for the server. [default: uksouth] --ssl [Disabled|Enabled] Whether SSL should be enabled for this server. [default: Enabled] --storage INTEGER The storage capacity of the server (the unit is megabytes). Valid storage sizes are 5,120 MB (minimum) with increases in 1,024-MB increments. [default: 51200] --version TEXT The version of MariaDB to use. [default: 10.2] --admin-username TEXT The user name for the administrator login. The admin-user parameter can't be azure_superuser, admin, administrator, root, guest, or public. [default: myadmin] --admin-password TEXT The password of the administrator user. Your password must contain between 8 and 128 characters. It must contain characters from three of the following categories: English uppercase letters, English lowercase letters, numbers, and non-alphanumeric characters. [required] --help","title":"Creating a Database"},{"location":"azure/#creating-a-registry","text":"Usage: ci-plumber azure create-registry [OPTIONS] Create a new Azure Container Registry Options: --registry-name TEXT The name of the registry [default: registry-195968669] --resource-group-name TEXT The name of the resource group to use. [default: myResourceGroup] --location [eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|northcentralus|westus|southafricanorth|centralindia|eastasia|japaneast|jioindiawest|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|india|japan|uk|unitedstates|eastasiastage|southeastasiastage|centraluseuap|eastus2euap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|swedensouth|switzerlandwest|ukwest|uaecentral|brazilsoutheast|qatarcentral] The name of the location to create the registry in. [default: uksouth] --sku [Basic|Standard|Premium] The SKU of the registry. [default: Basic] -v, --verbose Verbose output. [default: False] --help Show this message and exit.","title":"Creating a Registry"},{"location":"azure/#deploying-a-web-app","text":"Usage: ci-plumber azure deploy [OPTIONS] Creates an azure web app Options: --service-plan TEXT Service plan name [default: myServicePlan] --app-name TEXT Application name [default: myApp-105028613] --resource-group TEXT The name of the resource group to use. [default: myResourceGroup] --os-type TEXT OS type [default: linux] --image TEXT The name of the image to use. [required] --login-server TEXT The name of the login server to use. [required] --registry-name TEXT The name of the registry to use. [required] -v, --verbose Verbose output. [default: False] --help Show this message and exit.","title":"Deploying a Web App"},{"location":"azure/#listing-subscriptions","text":"Usage: ci-plumber azure list-subscriptions [OPTIONS] List Azure subscriptions. Options: --help Show this message and exit. ``` # ## Changing Active Subscription ```console Usage: ci-plumber azure set-default-subscription [OPTIONS] Set default subscription. Options: --subscription-id TEXT The subscription ID to set as default. [required] --help Show this message and exit.","title":"Listing Subscriptions"},{"location":"azure/#logging-in-to-azure","text":"Usage: ci-plumber azure login [OPTIONS] Log in to Azure using Azure CLI. Options: --help Show this message and exit.","title":"Logging in to Azure"},{"location":"gitlab/","text":"","title":"Gitlab"},{"location":"installation/","text":"Requirements Python 3.9+ Azure CLI Openshift CLI Windows/Mac/Linux. Others may work but are untested. A supported project type. Currently supported: Spring Boot Flask Or just a Dockerfile Installation // Install CI Plumber as well as all of the modules: $ pip install ci-plumber [ all ] // You can also install individual modules instead of the entire package: $ pip install ci-plumber $ pip install ci-plumber-azure // Once installed, you can add tab completion: $ ci-plumber --install-completion","title":"Installation"},{"location":"installation/#requirements","text":"Python 3.9+ Azure CLI Openshift CLI Windows/Mac/Linux. Others may work but are untested. A supported project type. Currently supported: Spring Boot Flask Or just a Dockerfile","title":"Requirements"},{"location":"installation/#installation","text":"// Install CI Plumber as well as all of the modules: $ pip install ci-plumber [ all ] // You can also install individual modules instead of the entire package: $ pip install ci-plumber $ pip install ci-plumber-azure // Once installed, you can add tab completion: $ ci-plumber --install-completion","title":"Installation"},{"location":"openshift/","text":"","title":"OpenShift"},{"location":"tutorial/","text":"Gitlab + Openshift A tip for the CLI prompts When you run the CLI, you will be prompted for information. When there is text in square brackets, this is the default. This information is often based off previous information you have entered. If you leave the prompt blank, this will be used. eg: $ ci-plumber azure create-db Name [my-database-779171168]: // If you leave that prompt blank, the value \"my-database-779171168\" will be used Initialise Gitlab First we need to initialise the project. All of the commands can either be run interactively or using the CLI options. For this tutorial we shall be using the interactive mode. $ ci-plumber gitlab init Gitlab url [git.cardiff.ac.uk]: <The URL to your gitlab instance> Username: <Your username> Email: <Your email> Access token: <Your access token> Docker registry url [registry.git.cf.ac.uk]: <The URL to your docker registry> Getting remote [12:41:23] Logging in to Gitlab Getting projects [12:41:24] Matching remote with Gitlab projects Found project: Flask Demo Generating .gitlab-ci.yml Generating Dockerfile Gitlab configured! This command will do several things: It will ask you for the gitlab url, username, email and access token. These will be stored in order to authenticate against Gitlab. It will also ask you for the docker registry url. This is the url that other plugins such as Openshift will be able to pull images from. It will then try to find the project that you are working on on Gitlab. It will then Genrate the .gitlab-ci.yml file and the Dockerfile if approprate for the project. Push changes to Gitlab We next need to push our changes to Gitlab so that Gitlab CI will run the new configuration: // Stage the changes $ git add . // Commit the changes $ git commit -m \"Add .gitlab-ci.yml and Dockerfile\" // Create a new tag to trigger the pipeline $ git tag -a v0.0.1 -m \"Release v0.0.1\" // Push the changes to Gitlab $ git push --follow-tags Deploy to Openshift Once Gitlab is set up, we can set up the Openshift project. Openshift should pick up on the credentials left by ci-plumber gitlab init . We can deploy the app to Openshift using the following command: $ ci-plumber openshift deploy Project: <A name unique to your project> Username [c1769331]: <Your username. The default should be yours> Password: <You won't be able to see what you're typing here. It's not broken.> Repeat for confirmation: [13:08:46] Logginginto GitLab Getting the Gitlab project [13:08:47] Loggin in to Openshift [13:08:49] Creating a new project [13:08:52] Creating secrets [13:09:11] Importing image-stream [13:09:13] Creating a new app [13:09:16] Exposing the service [13:09:18] Here are the details [13:09:20] <The details as well as the URL will be written here> Note For the Cardiff University Openshift, make sure that you are on the university network. You can then log in to Openshift using openshift.cs.cf.ac.uk as your login URL. Deploy a Database To deploy a database as well, you can use the following command: $ ci-plumber openshift create-db Mysql password: Mysql root password: [13:19:28] Creating database config Creating MariaDB pod from openshift/mariadb-persistent template [13:19:31] Exposing DB [13:19:33] Getting DNS [13:19:36] Writing config to maria.env // You can now find the credentials in maria.env $ cat maria.env ADMIN_PASSWORD=<Your password> USER=maria_user PASSWORD=<Your password> NAME=mariadb HOST=<The database DNS> Gitlab + Azure Initialise Gitlab To deploy to Azure, we shall use a different architecture for the project. We will begin in a similar manner to the Gitlab + Openshift section: $ ci-plumber gitlab init Gitlab url [git.cardiff.ac.uk]: <The URL to your gitlab instance> Username: <Your username> Email: <Your email> Access token: <Your access token> Docker registry url [registry.git.cf.ac.uk]: <The URL to your docker registry> Getting remote [12:41:23] Logging in to Gitlab Getting projects [12:41:24] Matching remote with Gitlab projects Found project: Flask Demo Generating .gitlab-ci.yml Generating Dockerfile Gitlab configured! Create a new Container Registry This will create Gitlab credentials similarly to before. However, we will now be using Azure instead of Gitlab to store the images. We must begin by creating a new Azure container registry: $ ci-plumber azure create-registry Registry name [registry887130626]: Resource group name [myResourceGroup]: sub1 [16:00:16] Creating resource group sub1 [16:00:24] Creating registry registry887130626 [16:00:40] Enabling admin user [16:00:43] Getting admin credentials [16:00:46] Logging in to Gitlab Gettingthe Gitlab project Creating Azure access keys in CI Azure access keys already exist in Gitlab CI for c1769331/flask-demo [16:00:47] Creating .gitlab-ci.yml // Stage the changes $ git add . // Commit the changes $ git commit -m \"Add .gitlab-ci.yml and Dockerfile\" // Create a new tag to trigger the pipeline $ git tag -a v0.0.1 -m \"Release v0.0.1\" // Push the changes to Gitlab $ git push Deploy our App to Azure We have now instantiated a new Azure container registry, pointed Gitlab CI to push new images to the registry, and triggered a build which should push the new image to the registry. Next, we need to deploy the app to Azure. We will use the following command: $ ci-plumber azure deploy Service plan [myServicePlan]: App name [myApp-159731108]: [16:08:33] Creating app service plan [16:08:43] Creating web app. This may take a while... [16:09:20] Assigning managed identity [16:09:28] Retrieving subscription ID [16:09:31] Granting permission to access container registry [16:09:42] Configuring app to use managed identity [16:09:47] Deploying [16:09:56] Deployed to https://myapp-159731108.azurewebsites.net It may take a moment to come online As can be seen, the app is now deployed to Azure. Deploy a Database We might also want to deploy a database for the project. We can use the following command: $ ci-plumber azure create-db Name [my-database-779171168]: Admin username [myadmin]: Admin password: Repeat for confirmation: [16:12:32] Initialising Server. This may take a while... [16:15:41] Created Database The credentials have been written to maria.env Similarly to the Openshift example, the details of the database are written to maria.env . This file uses standard syntax for environment variables, so it can be easily loaded using whatever method you prefer. For example, dotenv in Python.","title":"Tutorial"},{"location":"tutorial/#gitlab-openshift","text":"A tip for the CLI prompts When you run the CLI, you will be prompted for information. When there is text in square brackets, this is the default. This information is often based off previous information you have entered. If you leave the prompt blank, this will be used. eg: $ ci-plumber azure create-db Name [my-database-779171168]: // If you leave that prompt blank, the value \"my-database-779171168\" will be used","title":"Gitlab + Openshift"},{"location":"tutorial/#initialise-gitlab","text":"First we need to initialise the project. All of the commands can either be run interactively or using the CLI options. For this tutorial we shall be using the interactive mode. $ ci-plumber gitlab init Gitlab url [git.cardiff.ac.uk]: <The URL to your gitlab instance> Username: <Your username> Email: <Your email> Access token: <Your access token> Docker registry url [registry.git.cf.ac.uk]: <The URL to your docker registry> Getting remote [12:41:23] Logging in to Gitlab Getting projects [12:41:24] Matching remote with Gitlab projects Found project: Flask Demo Generating .gitlab-ci.yml Generating Dockerfile Gitlab configured! This command will do several things: It will ask you for the gitlab url, username, email and access token. These will be stored in order to authenticate against Gitlab. It will also ask you for the docker registry url. This is the url that other plugins such as Openshift will be able to pull images from. It will then try to find the project that you are working on on Gitlab. It will then Genrate the .gitlab-ci.yml file and the Dockerfile if approprate for the project.","title":"Initialise Gitlab"},{"location":"tutorial/#push-changes-to-gitlab","text":"We next need to push our changes to Gitlab so that Gitlab CI will run the new configuration: // Stage the changes $ git add . // Commit the changes $ git commit -m \"Add .gitlab-ci.yml and Dockerfile\" // Create a new tag to trigger the pipeline $ git tag -a v0.0.1 -m \"Release v0.0.1\" // Push the changes to Gitlab $ git push --follow-tags","title":"Push changes to Gitlab"},{"location":"tutorial/#deploy-to-openshift","text":"Once Gitlab is set up, we can set up the Openshift project. Openshift should pick up on the credentials left by ci-plumber gitlab init . We can deploy the app to Openshift using the following command: $ ci-plumber openshift deploy Project: <A name unique to your project> Username [c1769331]: <Your username. The default should be yours> Password: <You won't be able to see what you're typing here. It's not broken.> Repeat for confirmation: [13:08:46] Logginginto GitLab Getting the Gitlab project [13:08:47] Loggin in to Openshift [13:08:49] Creating a new project [13:08:52] Creating secrets [13:09:11] Importing image-stream [13:09:13] Creating a new app [13:09:16] Exposing the service [13:09:18] Here are the details [13:09:20] <The details as well as the URL will be written here> Note For the Cardiff University Openshift, make sure that you are on the university network. You can then log in to Openshift using openshift.cs.cf.ac.uk as your login URL.","title":"Deploy to Openshift"},{"location":"tutorial/#deploy-a-database","text":"To deploy a database as well, you can use the following command: $ ci-plumber openshift create-db Mysql password: Mysql root password: [13:19:28] Creating database config Creating MariaDB pod from openshift/mariadb-persistent template [13:19:31] Exposing DB [13:19:33] Getting DNS [13:19:36] Writing config to maria.env // You can now find the credentials in maria.env $ cat maria.env ADMIN_PASSWORD=<Your password> USER=maria_user PASSWORD=<Your password> NAME=mariadb HOST=<The database DNS>","title":"Deploy a Database"},{"location":"tutorial/#gitlab-azure","text":"","title":"Gitlab + Azure"},{"location":"tutorial/#initialise-gitlab_1","text":"To deploy to Azure, we shall use a different architecture for the project. We will begin in a similar manner to the Gitlab + Openshift section: $ ci-plumber gitlab init Gitlab url [git.cardiff.ac.uk]: <The URL to your gitlab instance> Username: <Your username> Email: <Your email> Access token: <Your access token> Docker registry url [registry.git.cf.ac.uk]: <The URL to your docker registry> Getting remote [12:41:23] Logging in to Gitlab Getting projects [12:41:24] Matching remote with Gitlab projects Found project: Flask Demo Generating .gitlab-ci.yml Generating Dockerfile Gitlab configured!","title":"Initialise Gitlab"},{"location":"tutorial/#create-a-new-container-registry","text":"This will create Gitlab credentials similarly to before. However, we will now be using Azure instead of Gitlab to store the images. We must begin by creating a new Azure container registry: $ ci-plumber azure create-registry Registry name [registry887130626]: Resource group name [myResourceGroup]: sub1 [16:00:16] Creating resource group sub1 [16:00:24] Creating registry registry887130626 [16:00:40] Enabling admin user [16:00:43] Getting admin credentials [16:00:46] Logging in to Gitlab Gettingthe Gitlab project Creating Azure access keys in CI Azure access keys already exist in Gitlab CI for c1769331/flask-demo [16:00:47] Creating .gitlab-ci.yml // Stage the changes $ git add . // Commit the changes $ git commit -m \"Add .gitlab-ci.yml and Dockerfile\" // Create a new tag to trigger the pipeline $ git tag -a v0.0.1 -m \"Release v0.0.1\" // Push the changes to Gitlab $ git push","title":"Create a new Container Registry"},{"location":"tutorial/#deploy-our-app-to-azure","text":"We have now instantiated a new Azure container registry, pointed Gitlab CI to push new images to the registry, and triggered a build which should push the new image to the registry. Next, we need to deploy the app to Azure. We will use the following command: $ ci-plumber azure deploy Service plan [myServicePlan]: App name [myApp-159731108]: [16:08:33] Creating app service plan [16:08:43] Creating web app. This may take a while... [16:09:20] Assigning managed identity [16:09:28] Retrieving subscription ID [16:09:31] Granting permission to access container registry [16:09:42] Configuring app to use managed identity [16:09:47] Deploying [16:09:56] Deployed to https://myapp-159731108.azurewebsites.net It may take a moment to come online As can be seen, the app is now deployed to Azure.","title":"Deploy our App to Azure"},{"location":"tutorial/#deploy-a-database_1","text":"We might also want to deploy a database for the project. We can use the following command: $ ci-plumber azure create-db Name [my-database-779171168]: Admin username [myadmin]: Admin password: Repeat for confirmation: [16:12:32] Initialising Server. This may take a while... [16:15:41] Created Database The credentials have been written to maria.env Similarly to the Openshift example, the details of the database are written to maria.env . This file uses standard syntax for environment variables, so it can be easily loaded using whatever method you prefer. For example, dotenv in Python.","title":"Deploy a Database"}]}